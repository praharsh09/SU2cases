%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                              %
% SU2 configuration file                                                       %
% Case description: Unit Cell flow around pin array (fluid)
% Author: T. Kattmann
% Institution: Robert Bosch GmbH
% Date: 20.05.2020
% File Version 7.0.4 "Blackbird"                                               %
%                                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% ------------- DIRECT, ADJOINT, AND LINEARIZED PROBLEM DEFINITION ------------%
%
% Mathematical problem (DIRECT, CONTINUOUS_ADJOINT, DISCRETE_ADJOINT)
MATH_PROBLEM= DIRECT
%
SOLVER= INC_NAVIER_STOKES
%
% Specify turbulence model (NONE, SA, SA_NEG, SST, SA_E, SA_COMP, SA_E_COMP, SST_SUST)
KIND_TURB_MODEL= NONE
%
RESTART_SOL= YES
%
% ---------------- INCOMPRESSIBLE FLOW CONDITION DEFINITION -------------------%
%
% vel-1 Re-100 dia-1 nu-1/Re Rho-100 Mu-1
%
% Density model within the incompressible flow solver.
% Options are CONSTANT (default), BOUSSINESQ, or VARIABLE. If VARIABLE,
% an appropriate fluid model must be selected.
INC_DENSITY_MODEL= CONSTANT
%
% Solve the energy equation in the incompressible flow solver
INC_ENERGY_EQUATION = YES
%
% Initial density for incompressible flows
INC_DENSITY_INIT= 100.0
%
% Initial velocity for incompressible flows (1.0,0,0 m/s by default)
INC_VELOCITY_INIT= ( 1, 0.0, 0.0 )
%
% Reference temperature for incompressible flows that include the 
% energy equation (1.0 K by default)
INC_TEMPERATURE_INIT= 338.0
%
% Non-dimensionalization scheme for incompressible flows. Options are
% INITIAL_VALUES (default), REFERENCE_VALUES, or DIMENSIONAL.
% INC_*_REF values are ignored unless REFERENCE_VALUES is chosen.
INC_NONDIM= DIMENSIONAL
%
% Specific heat at constant pressure, Cp (1004.703 J/kg*K (air)). 
% Incompressible fluids with energy eqn. only (CONSTANT_DENSITY, INC_IDEAL_GAS).
SPECIFIC_HEAT_CP= 3540.0
%
% Fluid model (STANDARD_AIR, IDEAL_GAS, VW_GAS, PR_GAS,
%              CONSTANT_DENSITY, INC_IDEAL_GAS, INC_IDEAL_GAS_POLY)
% !!!!!!!!!!!!!Is this option really necessary here?!!!!!!!!!!!!!!!!
FLUID_MODEL= CONSTANT_DENSITY
%
% --------------------------- VISCOSITY MODEL ---------------------------------%
%
% Viscosity model (SUTHERLAND, CONSTANT_VISCOSITY, POLYNOMIAL_VISCOSITY).
VISCOSITY_MODEL= CONSTANT_VISCOSITY
%
% Molecular Viscosity that would be constant (1.716E-5 by default)
MU_CONSTANT= 1
%
% --------------------------- THERMAL CONDUCTIVITY MODEL ----------------------%
%
% Pr_lam = mu_lam [Pa*s] * c_p [J/(kg*K)] / lambda[W/(m*K)]
%        = not used 1     * 3540           / 0.42
%        = not used 11.7 
% Laminar Conductivity model (CONSTANT_CONDUCTIVITY, CONSTANT_PRANDTL, 
% POLYNOMIAL_CONDUCTIVITY).
CONDUCTIVITY_MODEL= CONSTANT_PRANDTL
%
% Laminar Prandtl number (0.72 (air), only for CONSTANT_PRANDTL)
PRANDTL_LAM= 1
%
% Definition of the turbulent thermal conductivity model for RANS
% (CONSTANT_PRANDTL_TURB by default, NONE).
%TURBULENT_CONDUCTIVITY_MODEL= CONSTANT_PRANDTL_TURB
%
% Turbulent Prandtl number (0.9 (air) by default)
%PRANDTL_TURB= 0.90
%
% --------------------- STREAMWISE PERIODICITY DEFINITION ---------------------%
%
% Specify type of streamwise periodicty (default=NONE, PRESSURE_DROP, MASSFLOW)
KIND_STREAMWISE_PERIODIC= MASSFLOW
%
% Delta P [Pa] value that drives the flow as a source term in the momentum equations.
% Defaults to 1.0.
STREAMWISE_PERIODIC_PRESSURE_DROP= 33.6485948
%
% Target massflow [kg/s]. Necessary pressure drop is determined iteratively. 
% Initial value is given via STREAMWISE_PERIODIC_PRESSURE_DROP. Default value 1.0.
% Use INC_OUTLET_DAMPING as a relaxation factor. Default value 0.1 is a good start.
STREAMWISE_PERIODIC_MASSFLOW= 200
INC_OUTLET_DAMPING= 0.001
%
% Use streamwise periodic temperature (default=NO, YES)
% If YES, the heatflux is taken out at the outlet
% This option is only necessary if INC_ENERGY_EQUATION=YES
STREAMWISE_PERIODIC_TEMPERATURE= YES
%
% Prescibe integrated heat [W] extracted at the periodic "outlet".
% Only active if STREAMWISE_PERIODIC_TEMPERATURE= NO.
% If set to zero, the heat is integrated by the program over the MARKER_HEATFLUX.
% inner pin length 0.00376991 m = (0.00322-0.00262)*2*pi
% with 5e5 W/m that is Q = 1884.96
%STREAMWISE_PERIODIC_OUTLET_HEAT= -1884.96
%
% -------------------- BOUNDARY CONDITION DEFINITION --------------------------%
%
% Navier-Stokes (no-slip), constant heat flux wall  marker(s) (NONE = no marker)
% Format: ( marker name, constant heat flux (J/m^2), ... )
MARKER_HEATFLUX= ( fluid_solid_interface, 5e5 )
%
% Symmetry boundary marker(s) (NONE = no marker)
% Implementation identical to MARKER_EULER.
MARKER_SYM= ( symmetry )
%
% Periodic boundary marker(s) (NONE = no marker)
% Format: ( periodic marker, donor marker, rotation_center_x, rotation_center_y,
% rotation_center_z, rotation_angle_x-axis, rotation_angle_y-axis,
% rotation_angle_z-axis, translation_x, translation_y, translation_z, ... )
MARKER_PERIODIC= ( inlet, outlet, 0.0,0.0,0.0, 0.0,0.0,0.0, 2,0.0,0.0 )
%
% Alternative to periodic simulation with velocity inlet and pressure outlet
%INC_INLET_TYPE= VELOCITY_INLET
%MARKER_INLET= ( fluid_inlet, 338.0, 0.75, 1.0, 0.0, 0.0 )
%
%INC_OUTLET_TYPE= PRESSURE_OUTLET
%MARKER_OUTLET= ( fluid_outlet, 0.0 )
%
%FREESTREAM_TURBULENCEINTENSITY= 0.05
%FREESTREAM_TURB2LAMVISCRATIO= 10.0
%
% ------------------------ SURFACES IDENTIFICATION ----------------------------%
%
% Marker(s) of the surface in the surface flow solution file
MARKER_PLOTTING= (  fluid_solid_interface )
%
% Marker(s) of the surface where the non-dimensional coefficients are evaluated.
MARKER_MONITORING= ( fluid_solid_interface )
%
% Marker(s) of the surface that is going to be analyzed in detail (massflow, average pressure, distortion, etc)
MARKER_ANALYZE = ( outlet, inlet )
%
% Method to compute the average value in MARKER_ANALYZE (AREA, MASSFLUX).
MARKER_ANALYZE_AVERAGE = MASSFLUX
%
% Objective function in gradient evaluation
OBJECTIVE_FUNCTION= TOTAL_AVG_TEMPERATURE
%
% List of weighting values when using more than one OBJECTIVE_FUNCTION.
OBJECTIVE_WEIGHT= 0.0
%
% ------------- COMMON PARAMETERS DEFINING THE NUMERICAL METHOD ---------------%
%
% Number of iterations for single-zone problems
ITER= 5000
%
% Numerical method for spatial gradients (GREEN_GAUSS, WEIGHTED_LEAST_SQUARES)
NUM_METHOD_GRAD= GREEN_GAUSS
%
% CFL number (initial value for the adaptive CFL number)
CFL_NUMBER= 1e3
%
% Adaptive CFL number (NO, YES)
CFL_ADAPT= NO
%
% ------------------------ LINEAR SOLVER DEFINITION ---------------------------%
%
% Linear solver or smoother for implicit formulations:
% BCGSTAB, FGMRES, RESTARTED_FGMRES, CONJUGATE_GRADIENT (self-adjoint problems only), SMOOTHER.
LINEAR_SOLVER= FGMRES
%
% Preconditioner of the Krylov linear solver or type of smoother (ILU, LU_SGS, LINELET, JACOBI)
LINEAR_SOLVER_PREC= ILU
%
% Minimum error of the linear solver for implicit formulations
LINEAR_SOLVER_ERROR= 1e-15
%
% Max number of iterations of the linear solver for the implicit formulation
LINEAR_SOLVER_ITER= 10
%
% -------------------------- MULTIGRID PARAMETERS -----------------------------%
%
% Multi-grid levels (0 = no multi-grid)
MGLEVEL= 0
%
% -------------------- FLOW NUMERICAL METHOD DEFINITION -----------------------%
%
% Convective numerical method (JST, LAX-FRIEDRICH, CUSP, ROE, AUSM, AUSMPLUSUP,
%                              AUSMPLUSUP2, HLLC, TURKEL_PREC, MSW, FDS, SLAU, SLAU2)
CONV_NUM_METHOD_FLOW= FDS
%
% 2nd and 4th order artificial dissipation coefficients for
%     the JST method ( 0.5, 0.02 by default )
%JST_SENSOR_COEFF= ( 0.5, 0.05 )
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the flow equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_FLOW= YES
%
% Slope limiter (NONE, VENKATAKRISHNAN, VENKATAKRISHNAN_WANG,
%                BARTH_JESPERSEN, VAN_ALBADA_EDGE)
SLOPE_LIMITER_FLOW= NONE
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT, EULER_EXPLICIT)
TIME_DISCRE_FLOW= EULER_IMPLICIT
%
% -------------------- TURBULENT NUMERICAL METHOD DEFINITION ------------------%
%
% Convective numerical method (SCALAR_UPWIND)
CONV_NUM_METHOD_TURB= SCALAR_UPWIND
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the turbulence equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_TURB= NO
%
% Slope limiter (NONE, VENKATAKRISHNAN, VENKATAKRISHNAN_WANG,
%                BARTH_JESPERSEN, VAN_ALBADA_EDGE)
SLOPE_LIMITER_TURB= NONE
%
% Time discretization (EULER_IMPLICIT)
TIME_DISCRE_TURB= EULER_IMPLICIT
%
% --------------------------- CONVERGENCE PARAMETERS --------------------------%
%
% Convergence criteria (default=RESIDUAL, CAUCHY)
CONV_CRITERIA= RESIDUAL
%
% Min value of the residual (log10 of the residual)
CONV_RESIDUAL_MINVAL= -26
%
% Start convergence criteria at iteration number
CONV_STARTITER= 100000000
%
% ------------------------- INPUT/OUTPUT INFORMATION --------------------------%
%
% Mesh input file
MESH_FILENAME= fluid1cylPer.su2
%
% Mesh input file format (SU2, CGNS)
MESH_FORMAT= SU2
%
SOLUTION_FILENAME= solution_flow
RESTART_FILENAME= solution_flow
%
% Output tabular file format (TECPLOT, CSV)
TABULAR_FORMAT= CSV
GRAD_OBJFUNC_FILENAME= of_grad.csv
%
% Output file convergence history (w/o extension)
CONV_FILENAME= history
%
% Writing convergence history frequency
WRT_CON_FREQ= 1
%
% History output groups (use 'SU2_CFD -d <config_file>' to view list of available fields)
HISTORY_OUTPUT= ( ITER, RMS_RES, STREAMWISE_PERIODIC, FLOW_COEFF, LINSOL, HEAT )
%
% History output groups (use 'SU2_CFD -d <config_file>' to view list of available fields)
SCREEN_OUTPUT= (WALL_TIME, INNER_ITER, RMS_PRESSURE, RMS_TEMPERATURE, STREAMWISE_MASSFLOW, STREAMWISE_DP, PRESSURE_DROP )
SCREEN_WRT_FREQ_INNER= 25
%
OUTPUT_FILES= ( RESTART, PARAVIEW_MULTIBLOCK, PARAVIEW_LEGACY )
VOLUME_FILENAME= flow
SURFACE_FILENAME= surface_flow
READ_BINARY_RESTART= YES
%
% Writing frequency for volume/surface output
OUTPUT_WRT_FREQ= 5000
%
% Volume output fields/groups (use 'SU2_CFD -d <config_file>' to view list of available fields)
VOLUME_OUTPUT= ( COORDINATES, SOLUTION, RESIDUAL, PRIMITIVE )
%
% -------------------- FREE-FORM DEFORMATION PARAMETERS -----------------------%
%
% Tolerance of the Free-Form Deformation point inversion
FFD_TOLERANCE= 1E-10
%
% Maximum number of iterations in the Free-Form Deformation point inversion
FFD_ITERATIONS= 500
%
% FFD box definition: 3D case (FFD_BoxTag, X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, X4, Y4, Z4,
%                              X5, Y5, Z5, X6, Y6, Z6, X7, Y7, Z7, X8, Y8, Z8)
%                     2D case (FFD_BoxTag, X1, Y1, 0.0, X2, Y2, 0.0, X3, Y3, 0.0, X4, Y4, 0.0,
%                              0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
FFD_DEFINITION= (BOX,  0.0029772,0.0,0.0,  0.0081772,0.0,0.0  0.0081772,0.0026,0.0,  0.0029772,0.0026,0.0, 0.0,0.0,0.0,  0.0,0.0,0.0  0.0,0.0,0.0,  0.0,0.0,0.0 )
%
%
% FFD box degree: 3D case (x_degree, y_degree, z_degree)
%                 2D case (x_degree, y_degree, 0)
FFD_DEGREE= (8, 1, 0)
%
% Surface grid continuity at the intersection with the faces of the FFD boxes.
% To keep a particular level of surface continuity, SU2 automatically freezes the right
% number of control point planes (NO_DERIVATIVE, 1ST_DERIVATIVE, 2ND_DERIVATIVE, USER_INPUT)
FFD_CONTINUITY= NO_DERIVATIVE
%
% Definition of the FFD planes to be frozen in the FFD (x,y,z).
% Value from 0 FFD degree in that direction. Pick a value larger than degree if you dont want to fix any plane.
%FFD_FIX_I= (0,2,3)
%FFD_FIX_J= (0,2,3)
%FFD_FIX_K= (0,2,3)
%
% ----------------------- DESIGN VARIABLE PARAMETERS --------------------------%
%
% Kind of deformation (NO_DEFORMATION, SCALE_GRID, TRANSLATE_GRID, ROTATE_GRID,
%                      FFD_SETTING, FFD_NACELLE,
%                      FFD_CONTROL_POINT, FFD_CAMBER, FFD_THICKNESS, FFD_TWIST
%                      FFD_CONTROL_POINT_2D, FFD_CAMBER_2D, FFD_THICKNESS_2D, 
%                      FFD_TWIST_2D, HICKS_HENNE, SURFACE_BUMP, SURFACE_FILE)
DV_KIND= FFD_SETTING
%DV_KIND= FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D,FFD_CONTROL_POINT_2D
%
% Marker of the surface in which we are going apply the shape deformation
DV_MARKER= ( fluid_solid_interface )
%
% Parameters of the shape deformation
% - NO_DEFORMATION ( 1.0 )
% - FFD_SETTING ( 1.0 )
% - FFD_CONTROL_POINT ( FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Disp, y_Disp, z_Disp )
% - FFD_CONTROL_POINT_2D ( FFD_BoxTag, i_Ind, j_Ind, x_Disp, y_Disp )
DV_PARAM= ( 1.0 )
%DV_PARAM= ( BOX, 0, 0, 0.0, 1.0);( BOX, 1, 0, 0.0, 1.0); ( BOX, 2, 0, 0.0, 1.0); ( BOX, 3, 0, 0.0, 1.0); ( BOX, 4, 0, 0.0, 1.0); ( BOX, 5, 0, 0.0, 1.0); ( BOX, 6, 0, 0.0, 1.0); ( BOX, 7, 0, 0.0, 1.0); ( BOX, 8, 0, 0.0, 1.0); ( BOX, 0, 1, 0.0, 1.0); ( BOX, 1, 1, 0.0, 1.0); ( BOX, 2, 1, 0.0, 1.0); ( BOX, 3, 1, 0.0, 1.0); ( BOX, 4, 1, 0.0, 1.0); ( BOX, 5, 1, 0.0, 1.0); ( BOX, 6, 1, 0.0, 1.0); ( BOX, 7, 1, 0.0, 1.0); ( BOX, 8, 1, 0.0, 1.0)
%
% Value of the shape deformation
DV_VALUE= 1.0
%DV_VALUE= 1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
%
% ------------------------ GRID DEFORMATION PARAMETERS ------------------------%
%
% Linear solver or smoother for implicit formulations (FGMRES, RESTARTED_FGMRES, BCGSTAB)
DEFORM_LINEAR_SOLVER= FGMRES
%
% Preconditioner of the Krylov linear solver (ILU, LU_SGS, JACOBI)
DEFORM_LINEAR_SOLVER_PREC= ILU
%
% Number of smoothing iterations for mesh deformation
DEFORM_LINEAR_SOLVER_ITER= 1000
%
% Number of nonlinear deformation iterations (surface deformation increments)
DEFORM_NONLINEAR_ITER= 1
%
% Minimum residual criteria for the linear solver convergence of grid deformation
DEFORM_LINEAR_SOLVER_ERROR= 1E-14
%
% Print the residuals during mesh deformation to the console (YES, NO)
DEFORM_CONSOLE_OUTPUT= YES
%
% Deformation coefficient (linear elasticity limits from -1.0 to 0.5, a larger
% value is also possible)
DEFORM_COEFF = 1E6
%
% Type of element stiffness imposed for FEA mesh deformation (INVERSE_VOLUME,
%                                           WALL_DISTANCE, CONSTANT_STIFFNESS)
DEFORM_STIFFNESS_TYPE= WALL_DISTANCE
%
% Deform the grid only close to the surface. It is possible to specify how much
% of the volumetric grid is going to be deformed in meters or inches (1E6 by default)
DEFORM_LIMIT = 1E6
%
% Visualize the surface deformation (NO, YES)
VISUALIZE_SURFACE_DEF= YES
%
% Visualize the volume deformation (NO, YES)
VISUALIZE_VOLUME_DEF= YES
%
% Available design variables
% 2D Design variables
%    FFD_CONTROL_POINT_2D   (  19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov )
% FFD_CONTROL_POINT (X)
%DEFINITION_DV= ( 19, 1.0 | fluid_pin2_interface | BOX, 0, 0, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 1, 0, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 2, 0, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 3, 0, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 4, 0, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 5, 0, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 6, 0, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 7, 0, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 8, 0, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 0, 1, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 1, 1, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 2, 1, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 3, 1, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 4, 1, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 5, 1, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 6, 1, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 7, 1, 1.0, 0.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 8, 1, 1.0, 0.0 )
 
% FFD_CONTROL_POINT (Y)
DEFINITION_DV= ( 19, 1.0 | fluid_pin2_interface | BOX, 0, 0, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 1, 0, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 2, 0, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 3, 0, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 4, 0, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 5, 0, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 6, 0, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 7, 0, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 8, 0, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 0, 1, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 1, 1, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 2, 1, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 3, 1, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 4, 1, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 5, 1, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 6, 1, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 7, 1, 0.0, 1.0 ); ( 19, 1.0 | fluid_pin2_interface | BOX, 8, 1, 0.0, 1.0 )
%DEFORM_MESH= YES
%
% Optimization objective function with scaling factor, separated by semicolons.
% To include quadratic penalty function: use OPT_CONSTRAINT option syntax within the OPT_OBJECTIVE list.
% ex= Objective * Scale
OPT_OBJECTIVE= DRAG
%
% Finite difference step size for python scripts (0.001 default, recommended
%                                                 0.001 x REF_LENGTH)
FIN_DIFF_STEP= 0.00001
